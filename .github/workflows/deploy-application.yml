name: Deploy Application

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      front-end: ./massariol-client
      back-end: ./massariol-ws

    steps:
    - uses: actions/checkout@v2
    
    - uses: actions/setup-node@v2.1.0
    
    - name: npm install and npm run build
      run: | 
          npm i 
          npm run build:prod
      working-directory: ${{env.front-end}}
      
    - name: Add java dependencies
      uses: actions/setup-java@v1
      with:
        java-version: 11.0.4

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: ${{env.back-end}}

    - name: Build with Gradle
      run: ./gradlew build
      working-directory: ${{env.back-end}}

    - name: Find and Replace
      uses: jacobtomlinson/gha-find-replace@0.1.2
      env:       
        JDBC_DATABASE_URL: ${{secrets.JDBC_DATABASE_URL}}
      with:
        find: "JDBC_DATABASE_URL"
        replace: $JDBC_DATABASE_URL
        include: "task-definition.json"
      
    - name: Find and Replace
      uses: jacobtomlinson/gha-find-replace@0.1.2
      env:       
        JDBC_DATABASE_USERNAME: ${{secrets.JDBC_DATABASE_USERNAME}}
      with:
        find: "JDBC_DATABASE_USERNAME"
        replace: $JDBC_DATABASE_USERNAME
        include: "task-definition.json"
           
    - name: Find and Replace
      uses: jacobtomlinson/gha-find-replace@0.1.2
      env:       
        JDBC_DATABASE_PASSWORD: ${{secrets.JDBC_DATABASE_PASSWORD}}
      with:
        find: "JDBC_DATABASE_PASSWORD"
        replace: $JDBC_DATABASE_PASSWORD
        include: "task-definition.json"
    
    - name: Find and Replace
      uses: jacobtomlinson/gha-find-replace@0.1.2
      env:       
        JDBC_DATABASE_NAME: ${{secrets.JDBC_DATABASE_NAME}}
      with:
        find: "JDBC_DATABASE_NAME"
        replace: $JDBC_DATABASE_NAME
        include: "task-definition.json"
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{secrets.ACCESS_KEY_ID_AWS}}
        aws-secret-access-key: ${{secrets.ACCESS_KEY_AWS}}
        aws-region: sa-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ecr-massariol-repo
        IMAGE_TAG: ${{ github.sha }}
        JDBC_DATABASE_URL: ${{secrets.JDBC_DATABASE_URL}}
        JDBC_DATABASE_USERNAME: ${{secrets.JDBC_DATABASE_USERNAME}} 
        JDBC_DATABASE_PASSWORD: ${{secrets.JDBC_DATABASE_PASSWORD}}
        JDBC_DATABASE_NAME: ${{secrets.JDBC_DATABASE_NAME}}
        SPRING_PROFILES_ACTIVE: prod
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      working-directory: ${{env.back-end}}
        

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      env:
        JDBC_DATABASE_URL: ${{secrets.JDBC_DATABASE_URL}}
        JDBC_DATABASE_USERNAME: ${{secrets.JDBC_DATABASE_USERNAME}} 
        JDBC_DATABASE_PASSWORD: ${{secrets.JDBC_DATABASE_PASSWORD}}
        JDBC_DATABASE_NAME: ${{secrets.JDBC_DATABASE_NAME}}
        SPRING_PROFILES_ACTIVE: prod
      with:
        task-definition: task-definition.json
        container-name: massariol
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      env:
        JDBC_DATABASE_URL: ${{secrets.JDBC_DATABASE_URL}}
        JDBC_DATABASE_USERNAME: ${{secrets.JDBC_DATABASE_USERNAME}} 
        JDBC_DATABASE_PASSWORD: ${{secrets.JDBC_DATABASE_PASSWORD}}
        JDBC_DATABASE_NAME: ${{secrets.JDBC_DATABASE_NAME}}
        SPRING_PROFILES_ACTIVE: prod
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: massariol-app-service
        cluster: massariol
        wait-for-service-stability: true
